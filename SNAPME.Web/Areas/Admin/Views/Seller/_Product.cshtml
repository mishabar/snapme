@model SNAPME.Tokens.ProductToken

@{
    /* Categories groups and items */
    var audioGroup = new SelectListGroup { Name = "Audio" };
    var mobileGroup = new SelectListGroup { Name = "Mobile" };
    var wearableGroup = new SelectListGroup { Name = "Wearable Tech" };
    var camerasGroup = new SelectListGroup { Name = "Cameras" };
    var connectedDevicesGroup = new SelectListGroup { Name = "Connected Devices" };
    var appliancesGroup = new SelectListGroup { Name = "Appliances" };
    var kidsGroup = new SelectListGroup { Name = "Kids" };
    var techGroup = new SelectListGroup { Name = "Tech" };
    var sportGroup = new SelectListGroup { Name = "Sport & Fitness" };
    var homewareGroup = new SelectListGroup { Name = "Homeware" };

    var categoriesList = new List<SelectListItem>();
    categoriesList.Add(new SelectListItem { Group = audioGroup, Text = "Headphones", Value = "AUD-HEADPHONES" });
    categoriesList.Add(new SelectListItem { Group = audioGroup, Text = "Earphones", Value = "AUD-EARPHONES" });
    categoriesList.Add(new SelectListItem { Group = audioGroup, Text = "Accessories", Value = "AUD-ACCESSORIES" });
    categoriesList.Add(new SelectListItem { Group = audioGroup, Text = "Bluetooth Speakers", Value = "AUD-BLUETOOTHSPEAKERS" });
    categoriesList.Add(new SelectListItem { Group = mobileGroup, Text = "Smart Phones", Value = "MOB-HEADFONES" });
    categoriesList.Add(new SelectListItem { Group = mobileGroup, Text = "Tablets", Value = "MOB-HEADFONES" });
    categoriesList.Add(new SelectListItem { Group = mobileGroup, Text = "Accessories", Value = "MOB-ACCESSORIES" });
    categoriesList.Add(new SelectListItem { Group = wearableGroup, Text = "Medical", Value = "WEAR-medical" });
    categoriesList.Add(new SelectListItem { Group = wearableGroup, Text = "Smart Watch", Value = "WEAR-SMARTWATCH" });
    categoriesList.Add(new SelectListItem { Group = wearableGroup, Text = "Fashion", Value = "WEAR-FASHION" });
    categoriesList.Add(new SelectListItem { Group = camerasGroup, Text = "Monitoring", Value = "CAMERAS-MONITORING" });
    categoriesList.Add(new SelectListItem { Group = camerasGroup, Text = "Video", Value = "CAMERAS-VIDEO" });
    categoriesList.Add(new SelectListItem { Group = camerasGroup, Text = "Photo", Value = "CAMERAS-PHOTO" });
    categoriesList.Add(new SelectListItem { Group = connectedDevicesGroup, Text = "Smart Home", Value = "CONN-SMARTHOME" });
    categoriesList.Add(new SelectListItem { Group = connectedDevicesGroup, Text = "Personal", Value = "CONN-PERSONAL" });
    categoriesList.Add(new SelectListItem { Group = appliancesGroup, Text = "Entertainment", Value = "APPL-ENTERTAINMENT" });
    categoriesList.Add(new SelectListItem { Group = appliancesGroup, Text = "Kitchen", Value = "APPL-KITCHEN" });
    categoriesList.Add(new SelectListItem { Group = kidsGroup, Text = "Gaming", Value = "KIDS-GAMING" });
    categoriesList.Add(new SelectListItem { Group = kidsGroup, Text = "Educational Toys", Value = "KIDS-EDUCTOYS" });
    categoriesList.Add(new SelectListItem { Group = kidsGroup, Text = "Toys", Value = "KIDS-TOYS" });
    categoriesList.Add(new SelectListItem { Group = techGroup, Text = "Gadgets", Value = "TECH-GADGETS" });
    categoriesList.Add(new SelectListItem { Group = techGroup, Text = "Robotics", Value = "TECH-ROBOTICS" });
    categoriesList.Add(new SelectListItem { Group = sportGroup, Text = "Equipment", Value = "SPORT-EQUIOMENT" });
    categoriesList.Add(new SelectListItem { Group = sportGroup, Text = "Outdoor Sport", Value = "SPORT-OUTDOOR" });
    categoriesList.Add(new SelectListItem { Group = sportGroup, Text = "Bikes", Value = "SPORT-BIKES" });
    categoriesList.Add(new SelectListItem { Group = homewareGroup, Text = "Bedding", Value = "HOME-BEDDING" });
    categoriesList.Add(new SelectListItem { Group = homewareGroup, Text = "Bath", Value = "HOME-BATH" });
    categoriesList.Add(new SelectListItem { Group = homewareGroup, Text = "Kitchen", Value = "HOME-KITCHEN" });
    categoriesList.Add(new SelectListItem { Group = homewareGroup, Text = "Home Decor", Value = "HOME-HOMEDECOR" });
    categoriesList.Add(new SelectListItem { Group = homewareGroup, Text = "Other", Value = "HOME-OTHER" });

    var stockModels = (new string[] { "", "Item In Stock", "By Order Only" }).Select(m => new SelectListItem { Text = m, Value = m });
}

<div class="modal-header">
    <div class="modal-title">
        <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
        <h4 class="modal-title">@(string.IsNullOrEmpty(Model.name) ? "Create Product" : Model.name)</h4>
    </div>
</div>
<div class="modal-body">
    <form role="form" id="frmEditProduct">
        @if (User.IsInRole("Administrator"))
        {
            @Html.Hidden("GlobalSellerID", Model.seller_id)
        }
        @Html.HiddenFor(m => m.id)
        <div class="row">
            <div class="form-group col-sm-7">
                @Html.LabelFor(m => m.name, "Name")
                @Html.TextBoxFor(m => m.name, new { @class = "form-control" })
            </div>
            <div class="form-group col-sm-2">
                @Html.LabelFor(m => m.category, "SKU (Model Id)")
                @Html.TextBoxFor(m => m.sku, new { @class = "form-control" })
            </div>
            <div class="form-group col-sm-3">
                @Html.LabelFor(m => m.category, "Category")
                @Html.DropDownListFor(m => m.category, categoriesList, new { @class = "form-control" })
            </div>
            <div class="form-group col-sm-12">
                @Html.LabelFor(m => m.short_descritpion, "Short Descritpion")
                @Html.TextAreaFor(m => m.short_descritpion, new { @class = "form-control", rows = 2 })
            </div>
            <div class="form-group col-sm-12">
                @Html.LabelFor(m => m.descritpion, "Descritpion")
                @Html.TextAreaFor(m => m.descritpion, new { @class = "form-control", rows = 4 })
            </div>
            <div class="form-group col-sm-12">
                <label>Images</label>&nbsp;<span>Minimum image size: 853x480 px (16:9 ratio)</span>
                <div class="row images">
                    @for (int i = 0; i < 6; i++)
                    {
                        <div class="col-xs-6 col-sm-2 text-center">
                            <div class="embed-responsive embed-responsive-16by9" style="background-image: url(@(Model.images == null || Model.images[i] == null ? "/Content/Images/logo.png" : Model.images[i]))">
                                <input type="file" id="@string.Format("image{0}", i)" data-idx="@i" title="Click to select or change the image." />
                            </div>
                        </div>
                    }
                </div>
            </div>
            <div class="form-group col-sm-3">
                @Html.LabelFor(m => m.retail_price, "Retail Price")
                <div class="input-group">
                    @Html.TextBoxFor(m => m.retail_price, new { @class = "form-control" })
                    <span class="input-group-addon">@System.Globalization.CultureInfo.CurrentUICulture.NumberFormat.CurrencySymbol</span>
                </div>
            </div>
            <div class="form-group col-sm-3">
                @Html.LabelFor(m => m.purchase_price, "Purchase Price")
                <div class="input-group">
                    @Html.TextBoxFor(m => m.purchase_price, new { @class = "form-control" })
                    <span class="input-group-addon">@System.Globalization.CultureInfo.CurrentUICulture.NumberFormat.CurrencySymbol</span>
                </div>
            </div>
            <div class="form-group col-sm-3">
                @Html.LabelFor(m => m.min_quantity, "MOQ")
                @Html.TextBoxFor(m => m.min_quantity, new { @class = "form-control" })
            </div>
            <div class="form-group col-sm-3">
                @Html.LabelFor(m => m.suggested_sell_price, "Suggested Sell Price")
                <div class="input-group">
                    @Html.TextBoxFor(m => m.suggested_sell_price, new { @class = "form-control" })
                    <span class="input-group-addon">@System.Globalization.CultureInfo.CurrentUICulture.NumberFormat.CurrencySymbol</span>
                </div>
            </div>
            <div class="form-group col-sm-3">
                @Html.LabelFor(m => m.stock_model, "Inventory")
                @Html.DropDownListFor(m => m.stock_model, stockModels, new { @class = "form-control" })
            </div>
            <div class="form-group col-sm-3">
                @Html.LabelFor(m => m.stock_model, "Lead Time")
                @Html.TextBoxFor(m => m.lead_time, new { @class = "form-control" })
            </div>
            <div class="form-group col-sm-3">
                <label>&nbsp;</label>
                <div class="checkbox">
                    <label>
                        @Html.CheckBoxFor(m => m.is_dropship) Dropship
                    </label>
                </div>
            </div>
            <div class="form-group col-sm-3">
                <label>&nbsp;</label>
                <div class="checkbox">
                    <label>
                        @Html.CheckBoxFor(m => m.is_oem) OEM
                    </label>
                </div>
            </div>
            <div class="clearfix">&nbsp;</div>
            <div class="form-group col-sm-3">
                @Html.LabelFor(m => m.length, "Length")
                <div class="input-group">
                    @Html.TextBoxFor(m => m.length, new { @class = "form-control" })
                    <span class="input-group-addon">cm</span>
                </div>
            </div>
            <div class="form-group col-sm-3">
                @Html.LabelFor(m => m.width, "Width")
                <div class="input-group">
                    @Html.TextBoxFor(m => m.width, new { @class = "form-control" })
                    <span class="input-group-addon">cm</span>
                </div>
            </div>
            <div class="form-group col-sm-3">
                @Html.LabelFor(m => m.height, "Height")
                <div class="input-group">
                    @Html.TextBoxFor(m => m.height, new { @class = "form-control" })
                    <span class="input-group-addon">cm</span>
                </div>
            </div>
            <div class="form-group col-sm-3">
                @Html.LabelFor(m => m.weight, "Weight")
                <div class="input-group">
                    @Html.TextBoxFor(m => m.weight, new { @class = "form-control" })
                    <span class="input-group-addon">kg</span>
                </div>
            </div>
        </div>
    </form>



</div>
<div class="modal-footer">
    <button type="button" class="btn btn-default" data-dismiss="modal">Cancel</button>
    <button type="button" class="btn btn-primary" onclick="saveProduct()">Save</button>
</div>
